{"version":3,"sources":["components/Portfolio/header/header.component.jsx","components/Portfolio/summary/summary.component.jsx","components/Portfolio/portfolio.component.jsx","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","className","this","props","name","title","smooth","to","targetId","onClick","click","React","Summary","id","visible","Component","PortfolioComponent","showSummary","setState","isSummaryVisible","state","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAoCeA,G,6KA9BP,OACI,2BAASC,UAAU,iCACf,uBAAKA,UAAU,aACX,uBAAKA,UAAU,aACX,sBAAIA,UAAU,SACTC,KAAKC,MAAMC,MAEhB,sBAAIH,UAAU,YACTC,KAAKC,MAAME,SAIxB,gBAAC,OAAD,CAAMC,QAAQ,EAAOC,GAAIL,KAAKC,MAAMK,UAChC,uBAAKP,UAAU,YAAYQ,QAASP,KAAKC,MAAMO,OAC3C,2BAAST,UAAU,QACf,uBAAKA,UAAU,aACX,uBAAKA,UAAU,aACX,qBAAGA,UAAU,mBAAb,uB,GAnBNU,cCwBfC,E,uKAxBP,OACI,yBAAKC,GAAIX,KAAKC,MAAMU,IACfX,KAAKC,MAAMW,SAAW,6BAASb,UAAU,iCACtC,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,SAAb,mBAGA,uBAAGA,UAAU,aAAb,kBACmB,qDADnB,+EAIe,sDAJf,KAIoD,oDAJpD,KAKyB,yCALzB,0G,GAVNU,IAAMI,WC0BbC,E,kDAvBX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IAMVc,YAAc,WACV,EAAKC,SAAS,CACVC,kBAAkB,KAPtB,EAAKC,MAAQ,CACTD,kBAAkB,GAHP,E,qDAcf,OACI,2BACI,gBAAC,EAAD,CAAiBX,SAAU,UAAWJ,KAAM,kBAAgBC,MAAO,qBAAsBK,MAAOR,KAAKe,cACrG,gBAAC,EAAD,CAASJ,GAAI,UAAWC,QAASZ,KAAKkB,MAAMD,wB,GAlB3BR,aCUlBU,MARf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,QCGcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.33295dad.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Link } from 'react-scroll';\nimport './header.styles.css';\n\nclass HeaderComponent extends React.Component {\n    render() {\n        return (\n            <section className=\"hero is-success is-fullheight\">\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <h1 className=\"title\">\n                            {this.props.name}\n                        </h1>\n                        <h2 className=\"subtitle\">\n                            {this.props.title}\n                        </h2>\n                    </div>\n                </div>\n                <Link smooth={true}  to={this.props.targetId}>\n                    <div className=\"hero-foot\" onClick={this.props.click}>\n                        <section className=\"hero\">\n                            <div className=\"hero-body\">\n                                <div className=\"container\">\n                                    <p className=\"title heartbeat\">\n                                        Who am I?\n                                    </p>\n                                </div>\n                            </div>\n                        </section>\n                    </div>\n                </Link>\n            </section>\n        );\n    }\n}\n\nexport default HeaderComponent;","import React from 'react';\n\nclass Summary extends React.Component {\n    render() {\n        return (\n            <div id={this.props.id}>\n                {this.props.visible && <section className=\"hero is-primary is-fullheight\">\n                    <div className=\"hero-body\">\n                        <div className=\"container\">\n                            <p className=\"title\">\n                                Hey! I'm Diego.\n                            </p>\n                            <p className=\"is-size-3\">\n                                I'm (mainly) a <strong>backend developer</strong> who believes that things can really be\n                                done\n                                right. I'm a fan of\n                                terms like <strong>Clean Architecture</strong>, <strong>SOLID\n                                principles</strong>, <strong>agile</strong>... Trying to apply everything I know on a\n                                daily basis to improve both the product and myself.\n                            </p>\n                        </div>\n                    </div>\n                </section>}\n            </div>\n        )\n    }\n}\n\nexport default Summary;","import * as React from \"react\";\nimport HeaderComponent from \"./header/header.component\";\nimport Summary from \"./summary/summary.component\";\n\nclass PortfolioComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSummaryVisible: false\n        }\n    }\n\n    showSummary = () => {\n        this.setState({\n            isSummaryVisible: true\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <HeaderComponent targetId={\"summary\"} name={\"Diego GarcÃ­a\"} title={\"Software Developer\"} click={this.showSummary}/>\n                <Summary id={\"summary\"} visible={this.state.isSummaryVisible}/>\n            </div>\n        )\n    }\n}\n\nexport default PortfolioComponent;","import React from 'react';\nimport './App.sass';\nimport Header from \"./components/Portfolio/header/header.component\";\nimport Summary from \"./components/Portfolio/summary/summary.component\";\nimport Portfolio from \"./components/Portfolio/portfolio.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Portfolio/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}